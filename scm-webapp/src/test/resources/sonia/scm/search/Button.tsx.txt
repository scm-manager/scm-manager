/*
 * Copyright (c) 2020 - present Cloudogu GmbH
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see https://www.gnu.org/licenses/.
 */
import React, { FC, MouseEvent, ReactNode, KeyboardEvent } from "react";
import classNames from "classnames";
import { Link } from "react-router-dom";
import Icon from "../Icon";
import { createAttributesForTesting } from "../devBuild";

export type ButtonProps = {
  label?: string;
  title?: string;
  loading?: boolean;
  disabled?: boolean;
  action?: (event: MouseEvent | KeyboardEvent) => void;
  link?: string;
  className?: string;
  icon?: string;
  fullWidth?: boolean;
  reducedMobile?: boolean;
  children?: ReactNode;
  testId?: string;
};

type Props = ButtonProps & {
  type?: "button" | "submit" | "reset";
  color?: string;
};

const Button: FC<Props> = ({
  link,
  className,
  icon,
  fullWidth,
  reducedMobile,
  testId,
  children,
  label,
  type = "button",
  title,
  loading,
  disabled,
  action,
  color = "primary",
}) => {
  const renderIcon = () => {
    return <>{icon ? <Icon name={icon} color="inherit" className="is-medium pr-1" /> : null}</>;
  };

  if (link && !disabled) {
    return (
      <Link
        className={classNames(
          "button",
          "is-" + color,
          { "is-loading": loading },
          { "is-fullwidth": fullWidth },
          { "is-reduced-mobile": reducedMobile },
          className
        )}
        to={link}
        aria-label={label}
      >
        {renderIcon()}{" "}
        {(label || children) && (
          <>
            {label} {children}
          </>
        )}
      </Link>
    );
  }

  return (
    <button
      type={type}
      title={title}
      disabled={disabled}
      onClick={(event) => action && action(event)}
      className={classNames(
        "button",
        "is-" + color,
        { "is-loading": loading },
        { "is-fullwidth": fullWidth },
        { "is-reduced-mobile": reducedMobile },
        className
      )}
      {...createAttributesForTesting(testId)}
    >
      {renderIcon()}{" "}
      {(label || children) && (
        <>
          {label} {children}
        </>
      )}
    </button>
  );
};

export default Button;
