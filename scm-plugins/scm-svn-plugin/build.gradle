/*
 * Copyright (c) 2020 - present Cloudogu GmbH
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Affero General Public License as published by the Free
 * Software Foundation, version 3.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program. If not, see https://www.gnu.org/licenses/.
 */

plugins {
  id 'org.scm-manager.smp' version '0.17.0'
}

def svnkitVersion = '1.10.10-scm2-jakarta'

dependencies {
  implementation("sonia.svnkit:svnkit:${svnkitVersion}") {
    exclude group: 'org.tmatesoft.svnkit', module: 'trilead-ssh2'
    exclude group: 'org.apache.sshd', module: 'sshd-core'
    exclude group: 'org.apache.sshd', module: 'sshd-common'
  }
  implementation ("sonia.svnkit:svnkit-dav:${svnkitVersion}") {
    exclude group: 'org.apache.sshd', module: 'sshd-core'
    exclude group: 'org.apache.sshd', module: 'sshd-common'
  }
  testImplementation libraries.shiroUnit
}

scmPlugin {
  scmVersion = project.version
  core = true
  name = 'scm-svn-plugin'
  displayName = 'Subversion'
  description = 'Plugin for the version control system Subversion'
  author = 'Cloudogu GmbH'
  category = 'Source Code Management'
  avatarUrl = '/images/svn-logo.gif'

  openapi {
    packages = [
      'sonia.scm.api.v2.resources'
    ]
  }

  sonar {
    // SCMSvnDiffGenerator is a copy of an internal SVNKit class, with small changes for SCM-Manger.
    // If we refactor the class, it could become very hard to merge it with upstream.
    // So we do not want a duplication report for this class.
    property 'sonar.cpd.exclusions', '**/SCMSvnDiffGenerator.java'
  }

}

task testJar(type: Jar) {
 	classifier = 'tests'
	from sourceSets.test.output
}

configurations {
  tests {
    canBeConsumed = true
    canBeResolved = false
  }
}

artifacts {
  tests(testJar)
}
